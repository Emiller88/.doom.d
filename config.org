#+TITLE: DOOM Emacs Configuration
#+AUTHOR: Edmund Miller
* Basics
Who are you?
Who, who, who, who?
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "Edmund.A.Miller@gmail.com"
      user-full-name "Edmund Miller")
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defvar xdg-data (getenv "XDG_DATA_HOME"))
(defvar xdg-config (getenv "XDG_CONFIG_HOME"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq +doom-modeline-buffer-file-name-style 'relative-from-project
      show-trailing-whitespace t)
(add-hook! minibuffer-setup (setq-local show-trailing-whitespace nil))
#+END_SRC
Change font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 17)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 17)
      doom-unicode-font (font-spec :family "Iosevka" :size 17)
      doom-big-font (font-spec :family "Iosevka" :size 31))
#+END_SRC
Change Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC
Change the banner
#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "banner.png" doom-private-dir))
#+END_SRC
Cleanup Whitespace
#+BEGIN_SRC emacs-lisp
;; (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
(map!
 (:leader
   (:prefix "f"
     :desc "Find file in dotfiles" :n "o" #'+emiller/find-in-dotfiles
     :desc "Browse dotfiles" :n "O" #'+emiller/browse-dotfiles)
   (:prefix "i"
     :desc "Insert date" :n "d" #'insert-todays-date)
   (:prefix "n"
     :desc "Browse mode notes"     :n  "m" #'+emiller/find-notes-for-major-mode
     :desc "Browse project notes" :n "p" #'+emiller/find-notes-for-project
     :desc "Org => Trello" :n "u" #'org-trello-sync-buffer
     :desc "Trello => Org" :n "t" (lambda! (org-trello-sync-buffer t)))
   (:prefix "o"
     :desc "Calc" :n "c" #'calc
     :desc "easy-hugo" :n "g" #'easy-hugo
     :desc "i.org" :n "o" #'emiller/visit-i-org
     :desc "APP: mu4e" :n "m" #'=mu4e
     :desc "dired-sidebar" :n "n" #'dired-sidebar-toggle-sidebar
     :desc "emms" :n "s" #'emms
     :desc "proced" :n "p" #'proced
     :desc "APP: rss" :n "," #'=rss)
   (:prefix "p"
     :desc "Counsel-ag" :n "f" #'counsel-ag)
   (:prefix "g"
     :desc "Git Status" :n "g" #'magit-status
     :desc "List gists" :n "l" #'+gist:list)
   (:prefix "n"
     :desc "Org-noter" :n "o" #'org-noter)
   :desc "New workspace" :n "N" (lambda! () (+workspace/new (read-string "Enter workspace name: "))))
 (:when (featurep! :feature workspaces)
   :nmvi "M-t" #'+workspace/new
   :nmvi "M-1" (λ! (+workspace/switch-to 0))
   :nmvi "M-2" (λ! (+workspace/switch-to 1))
   :nmvi "M-3" (λ! (+workspace/switch-to 2))
   :nmvi "M-4" (λ! (+workspace/switch-to 3))
   :nmvi "M-5" (λ! (+workspace/switch-to 4))
   :nmvi "M-6" (λ! (+workspace/switch-to 5))
   :nmvi "M-7" (λ! (+workspace/switch-to 6))
   :nmvi "M-8" (λ! (+workspace/switch-to 7))
   :nmvi "M-9" (λ! (+workspace/switch-to 8))
   ))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
;; (map! :after helm-files
;;       :map helm-find-files-map
;;       ;; "C-h" #'helm-find-files-up-one-level
;;       ;; "C-l" #'helm-ff-RET)
;;       ("<C-backspace>" #'helm-find-files-up-one-level))

;; (map! :after helm
;;       :map helm-map
;;       ([tab] #'helm-execute-if-single-persistent-action)
;;       ("C-i" #'helm-execute-persistent-action))

;; ;;;###autoload
;; (defun double-flash-mode-line ()
;;   "Flash the modeline"
;;  (let ((flash-sec (/ 1.0 20)))
;;    (invert-face 'mode-line)
;;    (run-with-timer flash-sec nil #'invert-face 'mode-line)
;;    (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
;;    (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))

;; ;;;###autoload
;; (defun helm-execute-if-single-persistent-action (&optional attr split-onewindow)
;;  "Execute persistent action if the candidate list is less than 2"
;;  (interactive)
;;  (with-helm-alive-p
;;    (if (> (helm-get-candidate-number) 2)
;;        (double-flash-mode-line)
;;      (helm-execute-persistent-action))))
#+END_SRC
* Functions
Edit i.org
#+BEGIN_SRC emacs-lisp
(defun emiller/visit-i-org ()
  (interactive)
  (find-file "~/Dropbox/orgfiles/gtd/i.org"))
#+END_SRC
Ediff the ~init.example.el~ and my ~init.el~
#+BEGIN_SRC emacs-lisp
(defun ediff-init-files ()
  (interactive)
  (ediff-files (expand-file-name "init.el" doom-private-dir)
               (expand-file-name "init.example.el" user-emacs-directory)))
#+END_SRC
** Insert Date
Helpful for ~Snakemake~
#+BEGIN_SRC emacs-lisp
(defun insert-todays-date (arg)
  (interactive "P")
  (insert (if arg
              (format-time-string "%d-%m-%Y")
            (format-time-string "%Y-%m-%d"))))
(global-set-key (kbd "C-c d") 'insert-todays-date)
#+END_SRC
* Modules
** cc
#+begin_src emacs-lisp
(setq ccls-executable "/home/emiller/src/emacs/ccls/Release/ccls")
#+end_src
** deft
#+begin_src emacs-lisp
(after! deft
  (setq deft-directory "~/Dropbox/orgfiles/notes"))
#+end_src
** Dired
Get rid of dired message when using a
#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
** dired-sidebar
#+BEGIN_SRC emacs-lisp
(def-package! dired-sidebar
  )
#+END_SRC
** eShell
Get rid of modeline in eshell buffers
** elfeed
#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook #'hide-mode-line-mode)
(after! elfeed-search
  ;; face for starred articles
  ;; (defface elfeed-search-starred-title-face
  ;;   '((t :foreground "#f77"))
  ;;   "Marks a starred Elfeed entry.")

  ;; (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
  ;;shortcut to jump to starred bookmark
  ;; (defun emiller/elfeed-show-starred ()
  ;;   (interactive)
  ;;   (bookmark-jump "elfeed-starred"))

  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'star)))
#+END_SRC
Keybindings
#+BEGIN_SRC emacs-lisp
(after! elfeed-search
  (map! :map elfeed-search-mode-map
        :localleader
        :n "s" #'elfeed-toggle-star
        :n "h" #'mz/make-and-run-elfeed-hydra))
        ;; :n "S" #'emiller/elfeed-show-starred))
#+END_SRC
*** hydra
#+BEGIN_SRC emacs-lisp
(after! elfeed-search
  (defun z/hasCap (s) ""
         (let ((case-fold-search nil))
           (string-match-p "[[:upper:]]" s)))

  (defun z/get-hydra-option-key (s)
    "returns single upper case letter (converted to lower) or first"
    (interactive)
    (let ( (loc (z/hasCap s)))
      (if loc
          (downcase (substring s loc (+ loc 1)))
        (substring s 0 1))))

  (defun mz/make-elfeed-cats (tags)
    "Returns a list of lists. Each one is line for the hydra configuratio in the form
(c function hint)"
         (interactive)
         (mapcar (lambda (tag)
                   (let* (
                          (tagstring (symbol-name tag))
                          (c (z/get-hydra-option-key tagstring))
                          )
                     (list c (append '(elfeed-search-set-filter) (list (format "@6-months-ago +%s" tagstring) ))tagstring  )))
                 tags))
  (defmacro mz/make-elfeed-hydra ()
    `(defhydra mz/hydra-elfeed ()
       "filter"
       ,@(mz/make-elfeed-cats (elfeed-db-get-all-tags))
       ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
       ("M" elfeed-toggle-star "Mark")
       ("A" (elfeed-search-set-filter "@6-months-ago") "All")
       ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
       ("q" nil "quit" :color blue)))

  (defun mz/make-and-run-elfeed-hydra ()
    ""
    (interactive)
    (mz/make-elfeed-hydra)
    (mz/hydra-elfeed/body)))
#+END_SRC
** emms
#+BEGIN_SRC emacs-lisp
(def-package! emms
  :config
  (require 'emms-setup)
  (require 'emms-player-mpd)
  (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
  (setq emms-seek-seconds 5)
  (setq emms-player-list '(emms-player-mpd))
  (setq emms-info-functions '(emms-info-mpd))
  (setq emms-player-mpd-server-name "localhost")
  (setq emms-player-mpd-server-port "6600"))
#+END_SRC
** JavaScript
#+begin_src emacs-lisp
(defun i-will-have-what-js-is-having ()
  (let ((buffer-file-name (concat (file-name-sans-extension buffer-file-name) ".js")))
    (set-auto-mode)))
(add-to-list 'auto-mode-alist '("\\.vmjs\\'" . i-will-have-what-js-is-having))
#+end_src
** Magit
*** Git-gutter-fringe
#+BEGIN_SRC emacs-lisp
(defun +version-control|git-gutter-maybe ()
  (when buffer-file-name
    (require 'git-gutter-fringe)
    (git-gutter-mode +1)))
#+END_SRC
*** GPG signing
#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories '(("~/src" . 2))
      magit-save-repository-buffers nil
      magit-commit-arguments '("--gpg-sign=BD387FF7BC10AA9D")
      magit-rebase-arguments '("--autostash" "--gpg-sign=BD387FF7BC10AA9D")
      magit-pull-arguments '("--rebase" "--autostash" "--gpg-sign=BD387FF7BC10AA9D"))
#+END_SRC
*** Set editor
#+BEGIN_SRC emacs-lisp
(setenv "EDITOR" "emacsclient")
#+end_SRC
*** GitHub Reviews
#+BEGIN_SRC emacs-lisp
(def-package! github-review)
#+END_SRC
** mu4e
#+BEGIN_SRC emacs-lisp
;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
(after! mu4e-maildirs-extension
  (set-email-account! "Eman"
                      '((mu4e-sent-folder       . "/Eman/[Gmail]/Sent Mail")
                        (mu4e-drafts-folder     . "/Eman/[Gmail]/Drafts")
                        (mu4e-trash-folder      . "/Eman/[Gmail]/Trash")
                        (mu4e-refile-folder     . "/Eman/[Gmail]/All Mail")
                        (user-mail-address      . "eman0088@gmail.com")
                        (mu4e-compose-signature . "---\nEdmund Miller"))
                      t)

  (set-email-account! "UTD"
                      '((mu4e-sent-folder       . "/UTD/Sent Items")
                        (mu4e-drafts-folder     . "/UTD/Drafts")
                        (mu4e-trash-folder      . "/UTD/Deleted Items")
                        (mu4e-refile-folder     . "/UTD/Archive")
                        (user-mail-address      . "Edmund.Miller@utdallas.edu")
                        (mu4e-compose-signature . "---\nEdmund Miller"))
                      t)

  (set-email-account! "Gmail"
                      '((mu4e-sent-folder       . "/Gmail/[Gmail]/Sent Mail")
                        (mu4e-drafts-folder     . "/Gmail/[Gmail]/Drafts")
                        (mu4e-trash-folder      . "/Gmail/[Gmail]/Trash")
                        (mu4e-refile-folder     . "/Gmail/[Gmail]/All Mail")
                        (smtpmail-smtp-user     . "edmund.a.miller@gmail.com")
                        (user-mail-address      . "edmund.a.miller@gmail.com")
                        (mu4e-compose-signature . "---\nEdmund Miller"))
                      t))
#+END_SRC
** Notmuch
Add delete, which adds the ~trash~ tag
Counsel notmuch
#+BEGIN_SRC emacs-lisp
(map! :after notmuch
      :map notmuch-tree-mode-map
      :n "d" #'+notmuch/tree-delete
      :map notmuch-search-mode-map
      :n "d" #'+notmuch/search-delete
      (:leader
        (:prefix "/"
          :desc "Browse mode notes" :n "m" #'counsel-notmuch)))
#+END_SRC
** Org-mode
*** Misc
Bind capture to =C-c c=
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
Start in insert mode in =org-capture=
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
Set ~+org-vars~
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-directory "/home/emiller/Dropbox/orgfiles/")
  (setq +org-capture-todo-file "i.org"))
#+END_SRC
Function to return the absolute address of an org file, given its relative name.
#+BEGIN_SRC emacs-lisp
(after! org
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename)))
#+END_SRC
Set one archive file to rule them all
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s")))
#+END_SRC
Set Files that are pulled into ~org-agenda~
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-files (list "~/Dropbox/orgfiles/i.org"
                               "~/Dropbox/orgfiles/o.org"
                               "~/Dropbox/orgfiles/Lab_Notebook.org"
                               "~/Dropbox/orgfiles/schedule.org"
                               "~/Dropbox/orgfiles/gtd/gtd.org"
                               "~/Dropbox/orgfiles/gtd/tickler.org"
                               "~/src/olypsis/daily-journals/Edmund_Miller.org")))
#+END_SRC
Set Custom Icons
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-bullets-bullet-list '("#"))
  (setq org-ellipsis " ▼ "))
#+END_SRC
Org export settings
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-export-with-toc nil))
#+END_SRC
Log time when things get marked as done
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-log-done 'time))
#+END_SRC
Org Capture Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/schedule.org" )
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("n" "Personal notes" entry
           (file+headline "~/Dropbox/orgfiles/notes.org" "Inbox")
           "* %u %?\n%i\n%a" :prepend t :kill-buffer t)

          ("l" "Link" entry
           (file+headline "~/Dropbox/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)

          ("t" "Todo [Inbox]" entry
           (file+headline "~/Dropbox/orgfiles/gtd/i.org" "Unsorted")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t)

          ("T" "Tickler" entry
           (file+headline "~/Dropbox/orgfiles/gtd/tickler.org" "Tickler")
           "* %i%? \n %U")

          ("j" "Lab Entry" entry
           (file+olp+datetree "~/Dropbox/orgfiles/Lab_Notebook.org" "Lab Journal")
           "* %? %^g \n ")

          ;; ("d" "Lab To Do" entry
          ;;  (file+headline "~/Dropbox/orgfiles/GTD.org" "To Do")
          ;;  "** TODO %?\n%T" :prepend t)

          ("o" "Work To Do" entry
           (file+headline "~/Dropbox/orgfiles/o.org" "Unsorted")
           "** TODO %?\n%T" :prepend t)

          ("w" "Work Journal" entry
           (file+olp+datetree "~/src/olypsis/daily-journals/Edmund_Miller.org" )
           "* Tasks \n** [ ] %? \n* Journal %^g \n ")

          ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
          ;; {todo,notes,changelog}.org file is found in a parent directory.
          ("p" "Templates for projects")
          ("pt" "Project todo" entry  ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t)
          ("pn" "Project notes" entry  ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t)
          ("pc" "Project changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-notes-file "Unreleased")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t))))
#+END_SRC
Set org-refile to utilize helm or ivy
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)

  (setq org-refile-targets
        '((nil :maxlevel . 3)
          ("~/Dropbox/orgfiles/i.org" :maxlevel . 4)
          ("~/Dropbox/orgfiles/gtd/gtd.org" :maxlevel . 4)
          ("~/Dropbox/orgfiles/gtd/someday.org" :maxlevel . 3)
          ("~/Dropbox/orgfiles/gtd/tickler.org" :maxlevel . 4))))
#+END_SRC
Add o/O to add new list item
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'evil-org-special-o/O 'item)
#+END_SRC
*** org-agenda-custom
#+BEGIN_SRC emacs-lisp
(def-package! org-super-agenda
  ;; :commands (org-super-agenda-mode)
  :after org
  :init (advice-add #'org-super-agenda-mode :around #'doom*shut-up)
  :config
  (setq org-super-agenda-groups
        '((:name "Log\n"
                 :log t)  ; Automatically named "Log"
          (:name "Schedule\n"
                 :time-grid t)
          (:name "Today\n"
                 :scheduled today)
          (:name "Due today\n"
                 :deadline today)
          (:name "Overdue\n"
                 :deadline past)
          (:name "Due soon\n"
                 :deadline future)
          (:name "Waiting\n"
                 :todo "WAIT"
                 :order 98)
          (:name "Scheduled earlier\n"
                 :scheduled past))))
#+END_SRC
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" nil)
            (alltodo "")))
          ("g" . "GTD contexts")
          ("ga" "All TODO" alltodo nil
           ((org-agenda-sorting-strategy '(tag-up priority-up))))

          ("gl" "Lab" tags-todo "lab"
           ((org-agenda-sorting-strategy '(priority-up))
            ;; (org-agenda-prefix-format "[ ] %T: ")
            (org-agenda-compact-blocks t)))

          ("gw" "Work" tags-todo "@work"
           ((org-agenda-sorting-strategy '(priority-up))))
          ;; (org-agenda-compact-blocks t)))

          ("gs" "Study Time" tags-todo "@study"
           ((org-agenda-sorting-strategy '(priority-up))))

          ("ge" "Emacs Time" tags-todo "@emacs"))))
#+end_src
*** org-gcal
#+begin_src emacs-lisp
(def-package! org-gcal
  :config
  (setq org-gcal-client-id "119671856150-j6j4b8hjm1k8d1v2ar39c2g1ifdv8iq9.apps.googleusercontent.com"
        org-gcal-client-secret "KOa_aQ-SsyNkK_K4Y5ePk-k1"
        org-gcal-file-alist '(("Edmund.a.miller@gmail.com" .  "~/Dropbox/orgfiles/schedule.org")))
  ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) )))
#+end_src
** Python
*** Tox
#+BEGIN_SRC emacs-lisp
(def-package! tox)
#+END_SRC
*** lsp-python-ms
#+begin_src emacs-lisp
;; (def-package! lsp-python-ms
;;   :ensure nil
;;   :hook (python-mode . lsp)
;;   :config
;; (setq lsp-python-ms-dir
;;         (expand-file-name "~/src/emacs/python-language-server/output/bin/Release/")))
#+end_src
*** ein
#+BEGIN_SRC emacs-lisp
(set! :ein-notebook-dir "/home/emiller/src/ml/")

(map! :map ein:notebook-mode-map
      :localleader
      "," #'+ein-hydra/body)
#+END_SRC
** Reference
#+begin_src emacs-lisp
(setq reftex-default-bibliography '("~/Dropbox/orgfiles/reference/Bibliography.bib"))
(setq bibtex-completion-bibliography "~/Dropbox/orgfiles/reference/Bibliography.bib" ;the major bibtex file
      bibtex-completion-library-path "~/Dropbox/orgfiles/reference/pdf/" ;the directory to store pdfs
      bibtex-completion-notes-path "~/Dropbox/orgfiles/ref-notes.org" ;the note file for reference notes
      )
#+end_src
** Rust
#+BEGIN_SRC emacs-lisp
(setq +rust-src-dir "~/src/rust/src/")
#+END_SRC
** Solidity
#+BEGIN_SRC emacs-lisp
(setq solidity-solc-path "/usr/bin/solc")
(setq flycheck-solidity-solium-soliumrcfile "/home/emiller/Dropbox/.soliumrc.json")
(setq solidity-flycheck-solc-checker-active t)
#+END_SRC
* Packages
** Dired all-the-icons
#+BEGIN_SRC emacs-lisp
;; Shows the wrong faces
;; (def-package! all-the-icons-dired
;;   :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
** Easy Hugo
#+BEGIN_SRC emacs-lisp
(def-package! easy-hugo
  :init
  (setq easy-hugo-basedir "~/src/personalProjects/emillerSite/")
  (setq easy-hugo-url "https:/emiller88.github.io/")
  (setq easy-hugo-previewtime "300")
  (setq easy-hugo-default-ext ".org")
  (setq easy-hugo-org-header t)
  (setq easy-hugo-postdir "content/posts")
  (set-evil-initial-state! 'easy-hugo-mode 'emacs))
#+END_SRC
** Edit-server
#+BEGIN_SRC emacs-lisp
;; (def-package! edit-server
;;     :config
;;     (edit-server-start))
#+END_SRC
** Ivy-yasnippet
#+BEGIN_SRC emacs-lisp
(after! ivy
(def-package! ivy-yasnippet
  :commands (ivy-yasnippet)
  :config
  (map!
   (:leader
     (:prefix "s"
       :desc "Ivy-yasnippet" :n "y" #'ivy-yasnippet)))))
#+END_SRC
** Ivy Icons
#+begin_src emacs-lisp
(setq +ivy-buffer-icons t)
#+end_src
** Graphviz-dot-mode
#+BEGIN_SRC emacs-lisp
(def-package! graphviz-dot-mode)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(after! helm
 (setq +helm-posframe-text-scale 1)
  (setq +helm-posframe-parameters
        '((internal-border-width . 6)
          (width . 0.3)
          (height . 0.15)
          (min-width . 60)
          (min-height . 8))))
#+END_SRC
** hydra-posframe
#+BEGIN_SRC emacs-lisp
(def-package! hydra-posframe
  :after hydra
  :hook (after-init . hydra-posframe-enable))
#+END_SRC
Hydra for org src blocks
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-org-template (:color blue :hint nil)
    "

  ^((CODE))^            ^((CODE))^        ^((DRAW))^        ^((BLOCK))^  ^
  ---------------------------------------------------------------------
  %s(all-the-icons-fileicon \"emacs\") ^^^_e_lisp           ^%s(all-the-icons-alltheicon \"python\") ^^^^_p_ython       ^%s(all-the-icons-fileicon \"tex\") ^^^^^^^^_L_atex         %s(all-the-icons-octicon \"code\") _s_rc  ^
  %s(all-the-icons-fileicon \"emacs\") ^^^elisp-_t_angled   ^%s(all-the-icons-fileicon \"R\") ^^^^^^^^^^^_R_            ^%s(all-the-icons-fileicon \"graphviz\") ^^^_d_ot           %s(all-the-icons-faicon \"sticky-note-o\") _n_ote
  %s(all-the-icons-octicon \"terminal\") ^_z_sh             ^%s(all-the-icons-alltheicon \"rust\") ^^^^^^_r_ust          %s(all-the-icons-fileicon \"test-python\") i_P_ython       %s(all-the-icons-octicon \"info\") _i_nfo
  %s(all-the-icons-fileicon \"terminal\") _b_ash            ^%s(all-the-icons-fileicon \"go\") ^^^^^^^^^^_g_o
  %s(all-the-icons-fileicon \"solidity\") s_o_lidity         %s(all-the-icons-alltheicon \"javascript\") _j_avascript

"
    ;; CODE
    ("e" (hot-expand "<s" "emacs-lisp"))
    ("t" (hot-expand "<s" "emacs-lisp" ":tangle yes"))
    ("z" (hot-expand "<s" "zsh" ":results output :exports both :shebang \"#!/usr/bin/env zsh\"\n"))
    ("b" (hot-expand "<s" "bash" ":results output :exports both :shebang \"#!/usr/bin/env bash\"\n"))
    ("o" (hot-expand "<s" "solidity"))
    ;; CODE
    ("p" (hot-expand "<s" "python"))
    ("R" (hot-expand "<s" "R"))
    ("r" (hot-expand "<s" "rust"))
    ("g" (hot-expand "<s" "go"))
    ("j" (hot-expand "<s" "javascript"))
    ;; DRAW
    ("L" (hot-expand "<L"))
    ("d" (hot-expand "<s" "dot :file CHANGE.png"))
    ("P" (hot-expand "<s" "iPython"))
    ;; BLOCK
    ("s" (hot-expand "<s"))
    ("n" (hot-expand "<not"))
    ("i" (hot-expand "<i"))
    ("<" self-insert-command "ins")
    ("q" nil "quit"))

  (require 'org-tempo)  ; Required from org 9 onwards for old template expansion
  ;; Reset the org-template expnsion system, this is need after upgrading to org 9 for some reason
  (setq org-structure-template-alist (eval (car (get 'org-structure-template-alist 'standard-value))))
  (defun hot-expand (str &optional mod header)
    "Expand org template.

STR is a structure template string recognised by org like <s. MOD is a
string with additional parameters to add the begin line of the
structure element. HEADER string includes more parameters that are
prepended to the element after the #+HEADER: tag."
    (let (text)
      (when (region-active-p)
        (setq text (buffer-substring (region-beginning) (region-end)))
        (delete-region (region-beginning) (region-end))
        (deactivate-mark))
      (when header (insert "#+HEADER: " header) (forward-line))
      (insert str)
      (org-tempo-complete-tag)
      (when mod (insert mod) (forward-line))
      (when text (insert text))))

  (define-key org-mode-map "<"
    (lambda () (interactive)
      (if (or (region-active-p) (looking-back "^"))
          (hydra-org-template/body)
        (self-insert-command 1))))

  (eval-after-load "org"
    '(cl-pushnew
      '("not" . "note")
      org-structure-template-alist))
#+END_SRC
** Org
*** Auto-org-md
#+BEGIN_SRC emacs-lisp
(after! org
  (def-package! auto-org-md))
#+END_SRC
*** Org-clock-csv
#+BEGIN_SRC emacs-lisp
(after! org
(def-package! org-clock-csv))
#+END_SRC
*** Org-noter
#+BEGIN_SRC emacs-lisp
(after! org
(def-package! org-noter
  :config
  (map!
   (:leader
     (:prefix "n"
       :desc "Org-noter-insert" :n "i" #'org-noter-insert-note)))))
#+END_SRC
*** Pomodoro
#+BEGIN_SRC emacs-lisp
(after! org
(def-package! org-pomodoro))
#+END_SRC
Add keybinding
#+BEGIN_SRC emacs-lisp
(map! :after org
      :map org-mode-map
      :localleader
      :n "c p" #'org-pomodoro)
#+END_SRC
Get rid of the fight bell
#+BEGIN_SRC emacs-lisp
(after! org-pomodoro
  (setq org-pomodoro-finished-sound-p nil)
  (setq org-pomodoro-short-break-sound-p nil)
  (setq org-pomodoro-long-break-sound-p nil))
#+END_SRC
*** Trello
#+BEGIN_SRC emacs-lisp
;; (custom-set-variables '(org-trello-files '("/home/emiller/Dropbox/orgfiles/e-m.org")))
#+END_SRC
** RSS
Make it only one week
#+BEGIN_SRC emacs-lisp
;; (after! elfeed
;;   (setq elfeed-search-filter "@1-week-ago +unread"))
#+END_SRC
** Reformatter
#+begin_src emacs-lisp
(def-package! reformatter
  :config
  (defconst Rscript-command "Rscript")
  (reformatter-define styler
    :program Rscript-command
    :args (list "--vanilla" "-e" "con <- file(\"stdin\")
out <- styler::style_text(readLines(con))
close(con)
out")
    :lighter " styler"))
#+end_src
** package-lint
#+BEGIN_SRC emacs-lisp
(def-package! package-lint)
#+END_SRC
** Write
*** Languagetool
#+BEGIN_SRC emacs-lisp
;; (setq langtool-language-tool-jar "~/src/emacsExtras/languagetool-commandline.jar")
(setq +write-text-scale +2)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
(after! yasnippet
  (push (expand-file-name "snippets/" doom-private-dir) yas-snippet-dirs))
#+END_SRC
