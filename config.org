#+TITLE: DOOM Emacs Configuration
#+AUTHOR: Edmund Miller
* Basics
Who are you?
Who, who, who, who?
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "Edmund.A.Miller@gmail.com"
      user-full-name "Edmund Miller")
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defvar xdg-data (getenv "XDG_DATA_HOME"))
(defvar xdg-config (getenv "XDG_CONFIG_HOME"))
#+END_SRC
Change font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 17)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 17)
      doom-unicode-font (font-spec :family "Iosevka" :size 17)
      doom-big-font (font-spec :family "Iosevka" :size 31))
#+END_SRC
Change Theme
#+BEGIN_SRC emacs-lisp
;; (setq doom-theme 'doom-acario-light)
#+END_SRC
Change the banner
#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "narf.png" doom-private-dir))
#+END_SRC
Cleanup Whitespace
#+BEGIN_SRC emacs-lisp
;; (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
(map!
 (:leader
   (:prefix "f"
     :desc "Find file in dotfiles" :n "o" #'+emiller/find-in-dotfiles
     :desc "Browse dotfiles" :n "O" #'+emiller/browse-dotfiles)
   (:prefix "i"
     :desc "Insert date" :n "d" #'insert-todays-date)
   (:prefix "n"
     :desc "Browse mode notes"     :n  "m" #'+emiller/find-notes-for-major-mode
     :desc "Browse project notes" :n "p" #'+emiller/find-notes-for-project)
   (:prefix "o"
     :desc "Calc" :n "c" #'calc
     :desc "easy-hugo" :n "g" #'easy-hugo
     :desc "APP: IRC" :n "i" #'=irc
     :desc "APP: notmuch" :n "m" #'=notmuch
     :desc "dired-sidebar" :n "n" #'dired-sidebar-toggle-sidebar
     :desc "todo.org" :n "o" #'+emiller/visit-todo-org
     :desc "projects" :n "p" #'+emiller/visit-projects-org
     :desc "emms" :n "s" #'emms
     :desc "APP: rss" :n "," #'=rss)
   (:prefix "p"
     :desc "Counsel-ag" :n "f" #'counsel-ag)
   (:prefix "g"
     :desc "Git Status" :n "g" #'magit-status
     :desc "List gists" :n "l" #'+gist:list)
   (:prefix "n"
     :desc "Org-noter" :n "o" #'org-noter)
   :desc "New workspace" :n "N" (lambda! () (+workspace/new (read-string "Enter workspace name: "))))
 (:when (featurep! :feature workspaces)
   :nmvi "M-t" #'+workspace/new
   :nmvi "M-1" (λ! (+workspace/switch-to 0))
   :nmvi "M-2" (λ! (+workspace/switch-to 1))
   :nmvi "M-3" (λ! (+workspace/switch-to 2))
   :nmvi "M-4" (λ! (+workspace/switch-to 3))
   :nmvi "M-5" (λ! (+workspace/switch-to 4))
   :nmvi "M-6" (λ! (+workspace/switch-to 5))
   :nmvi "M-7" (λ! (+workspace/switch-to 6))
   :nmvi "M-8" (λ! (+workspace/switch-to 7))
   :nmvi "M-9" (λ! (+workspace/switch-to 8)))
 (:map vterm-mode-map
   ;; Easier window movement
   :i "C-h" #'evil-window-left
   :i "C-j" #'evil-window-down
   :i "C-k" #'evil-window-up
   :i "C-l" #'evil-window-right))
#+END_SRC
* Functions
Ediff the ~init.example.el~ and my ~init.el~
** Compare init files
#+BEGIN_SRC emacs-lisp
(defun ediff-init-files ()
  (interactive)
  (ediff-files (expand-file-name "init.el" doom-private-dir)
               (expand-file-name "init.example.el" user-emacs-directory)))
#+END_SRC
** Insert Date
Helpful for ~Snakemake~
#+BEGIN_SRC emacs-lisp
(defun insert-todays-date (arg)
  (interactive "P")
  (insert (if arg
              (format-time-string "%d-%m-%Y")
            (format-time-string "%Y-%m-%d"))))
(global-set-key (kbd "C-c d") 'insert-todays-date)
#+END_SRC
* Modules
** clojure
#+BEGIN_SRC emacs-lisp
(after! cider
  (set-popup-rules!
    '(("^\\*cider-error*" :ignore t)
      ("^\\*cider-repl" :quit nil)
      ("^\\*cider-repl-history" :vslot 2 :ttl nil))))
#+END_SRC
** dired
Get rid of dired message when using a
#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
*** dired-sidebar
#+BEGIN_SRC emacs-lisp
(after! dired
  (use-package! dired-sidebar))
#+END_SRC
** elisp
*** package-lint
#+BEGIN_SRC emacs-lisp
;; (use-package! package-lint)
#+END_SRC
** eshell
Get rid of modeline in eshell buffers
#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook #'hide-mode-line-mode)
#+END_SRC
** graphviz-dot-mode
#+BEGIN_SRC emacs-lisp
(use-package! graphviz-dot-mode)
#+END_SRC
** irc
#+BEGIN_SRC emacs-lisp
(after! circe
  (set-irc-server! "chat.freenode.net"
                   `(:tls t
                          :port 6697
                          :nick "emiller88"
                          :sasl-username ,(+pass-get-user "irc/freenode.net")
                          :sasl-password (lambda (&rest _) (+pass-get-secret "irc/freenode.net"))
                          :channels ("#bioinformatics" "#clojure" "#emacs" "#emacs-circe" "#home-manager" "#nixos" "#nixos-emacs" "#sway" "##rust" "#python" "#pine64"))))
#+END_SRC
Other Channels
- #haskell
** javascript
#+BEGIN_SRC emacs-lisp
(defun i-will-have-what-js-is-having ()
  (let ((buffer-file-name (concat (file-name-sans-extension buffer-file-name) ".js")))
    (set-auto-mode)))
(add-to-list 'auto-mode-alist '("\\.vmjs\\'" . i-will-have-what-js-is-having))
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp
(after! lsp
  (setq lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-show-diagnostics nil
        lsp-signature-render-all nil))
#+END_SRC
** magit
*** Git-gutter-fringe
#+BEGIN_SRC emacs-lisp
(defun +version-control|git-gutter-maybe ()
  (when buffer-file-name
    (require 'git-gutter-fringe)
    (git-gutter-mode +1)))
#+END_SRC
*** GPG signing
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq magit-repository-directories '(("~/src" . 3))
        magit-save-repository-buffers nil
        magit-commit-arguments '("--gpg-sign=BD387FF7BC10AA9D")
        magit-rebase-arguments '("--autostash" "--gpg-sign=BD387FF7BC10AA9D")
        magit-pull-arguments '("--rebase" "--autostash" "--gpg-sign=BD387FF7BC10AA9D")))
#+END_SRC
*** Set editor
#+BEGIN_SRC emacs-lisp
(setenv "EDITOR" "emacsclient")
#+END_SRC

** nextflow
#+BEGIN_SRC emacs-lisp
(use-package! nextflow-mode)
#+END_SRC
** notmuch
Add delete, which adds the ~trash~ tag
Counsel notmuch
Fix quitting notmuch to remove the workspace
#+BEGIN_SRC emacs-lisp
(map! :after notmuch
      :map notmuch-tree-mode-map
      :n "d" #'+notmuch/tree-delete
      :n "q" #'+notmuch/quit
      :map notmuch-search-mode-map
      :n "d" #'+notmuch/search-delete
      :n "q" #'+notmuch/quit
      (:leader
        (:prefix "/"
          :desc "Browse mode notes" :n "m" #'counsel-notmuch)))
(after! notmuch
  (setq +notmuch-sync-backend 'mbsync
        notmuch-always-prompt-for-sender t
        send-mail-function 'sendmail-send-it))
#+END_SRC
** org
*** Misc
Start in insert mode in =org-capture=
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
Set ~+org-vars~
#+BEGIN_SRC emacs-lisp
(setq org-directory "/home/emiller/sync/org/"
      org-archive-location (concat org-directory "archive/%s::")
      +org-capture-journal-file "deft/journal.org"
      org-ellipsis " ▼ "
      org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷" "☷" "☷" "☷"))
#+END_SRC
Org export settings
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-export-with-toc nil))
#+END_SRC
Log time when things get marked as done
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-log-done 'time))
#+END_SRC
*** Org Capture Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        (append
         ;; TODO generalize these with org-directory
         '(("a" "Appointment" entry (file  "~/sync/org/schedule.org" )
            "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
           ("l" "Lab Entry" entry
            (file+olp+datetree "~/sync/org/deft/lab/notebook.org")
           "* %U %?\n%i\n%a"))
         org-capture-templates)))
#+END_SRC
*** org-agenda-custom
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" nil)
            (alltodo "")))
          ("g" . "GTD contexts")
          ("ga" "All TODO" alltodo nil
           ((org-agenda-sorting-strategy '(tag-up priority-up))))

          ("gl" "Lab" tags-todo "lab"
           ((org-agenda-sorting-strategy '(priority-up))
            ;; (org-agenda-prefix-format "[ ] %T: ")
            (org-agenda-compact-blocks t)))

          ("gw" "Work" tags-todo "@work"
           ((org-agenda-sorting-strategy '(priority-up))))
          ;; (org-agenda-compact-blocks t)))

          ("gs" "Study Time" tags-todo "@study"
           ((org-agenda-sorting-strategy '(priority-up))))

          ("ge" "Emacs Time" tags-todo "@emacs"))))
#+END_SRC
*** ~Packages~
**** Auto-org-md
#+BEGIN_SRC emacs-lisp
(after! org
  (use-package! auto-org-md))
#+END_SRC
**** deft
#+BEGIN_SRC emacs-lisp
(after! deft
  (setq deft-directory "~/sync/org/deft"
        deft-recursive t))
#+END_SRC
**** Org-clock-csv
#+BEGIN_SRC emacs-lisp
(after! org
  (use-package! org-clock-csv))
#+END_SRC
**** org-gcal
#+BEGIN_SRC emacs-lisp
(use-package! org-gcal
  :config
  (setq org-gcal-client-id "119671856150-j6j4b8hjm1k8d1v2ar39c2g1ifdv8iq9.apps.googleusercontent.com"
        org-gcal-client-secret "KOa_aQ-SsyNkK_K4Y5ePk-k1"
        ;; TODO Generalize
        org-gcal-file-alist '(("Edmund.a.miller@gmail.com" .  "~/sync/org/schedule.org"))))
#+END_SRC
**** Org-noter
#+BEGIN_SRC emacs-lisp
(after! org
  (use-package! org-noter
    :config
    (setq org-noter-notes-search-path '("~/sync/org/deft/noter"))
    (map!
     (:leader
       (:prefix "n"
         :desc "Org-noter-insert" :n "i" #'org-noter-insert-note)))))
#+END_SRC
**** org-ref
#+BEGIN_SRC emacs-lisp
(after! org
  (use-package! org-ref
    :config
    (setq reftex-default-bibliography '("~/sync/reference/references.bib"))

    ;; see org-ref for use of these variables
    (setq org-ref-bibliography-notes "~/sync/reference/ref-notes.org"
          org-ref-default-bibliography '("~/sync/reference/references.bib")
          org-ref-pdf-directory "~/sync/reference/pdf/")))
  ;; (map! :map evil-org-mode
  ;;       (:localleader
  ;;         (:prefix "["
  ;;           :desc "Org-noter-insert" :n "i" #'org-noter-insert-note))))
#+END_SRC
** pretty-code
#+BEGIN_SRC emacs-lisp
(setq +pretty-code-enabled-modes '(emacs-lisp-mode))
#+END_SRC
** reference
#+BEGIN_SRC emacs-lisp
;; TODO Generalize
(setq reftex-default-bibliography '("~/sync/reference/references.bib")
      bibtex-completion-bibliography "~/sync/reference/references.bib" ;the major bibtex file
      bibtex-completion-library-path "~/sync/reference/pdf/" ;the directory to store pdfs
      bibtex-completion-notes-path "~/sync/reference/ref-notes.org" ;the note file for reference notes
      )
#+END_SRC
** rss
*** Keybindings
#+BEGIN_SRC emacs-lisp
(after! elfeed-search
  (map! :map elfeed-search-mode-map
        :localleader
        :n "m" #'my/elfeed-search-view-hydra/body
        :n "s" #'elfeed-toggle-star
        :n "r" #'elfeed-update))
#+END_SRC
*** Set max width
#+BEGIN_SRC emacs-lisp
(after! elfeed
  (setq elfeed-search-title-max-width 120))
#+END_SRC
*** Filter Hydra
**** Macro and function
#+BEGIN_SRC emacs-lisp
(use-package! pretty-hydra)
(cl-defmacro unpackaged/elfeed-search-view-hydra-define (name body views)
  "Define a pretty hydra named NAME with BODY and VIEWS.
VIEWS is a plist: in it, each property is a string which becomes
a column header in the hydra, and each value is a list of lists
in this format: (KEY COMPONENT &optional LABEL).

The KEY is a key sequence passed to `kbd', like \"s\" or \"S
TAB\".  The COMPONENT is an Elfeed filter component, which may
begin with \"+\" or \"=\", and in which spaces are automatically
escaped as required by Elfeed.  The LABEL, if present, is a
string displayed next to the KEY; if absent, COMPONENT is
displayed.

In the resulting hydra, when KEY is pressed, the COMPONENT is
toggled in `elfeed-search-filter'.  It is toggled between three
states: normal, inverse, and absent.  For example, the component
\"+tag\" cycles between three states in the filter: \"+tag\",
\"-tag\", and \"\".  The appropriate inverse prefix is used
according to the component's prefix (i.e. for \"=\", the inverse
is \"~\", and for \"\" (a plain regexp), \"!\" is used).

These special components may be used to read choices from the
Elfeed database with completion and toggle them:

  :complete-age   Completes and sets the age token.
  :complete-feed  Completes and toggles a feed token.
  :complete-tag   Completes and toggles a tag token.
  nil             Sets default filter.

A complete example:

  (unpackaged/elfeed-search-view-hydra-define my/elfeed-search-view-hydra
    (:foreign-keys warn)
    (\"Views\"
     ((\"@\" :complete-age \"Date\")
      (\"d\" nil))
     \"Status\"
     ((\"su\" \"+unread\"))
     \"Feed\"
     ((\"f TAB\" :complete-feed \"Choose\")
      (\"fE\" \"=Planet Emacslife\" \"Planet Emacslife\"))
     \"Tags\"
     ((\"t TAB\" :complete-tag \"Choose\")
      (\"te\" \"+Emacs\"))
     \"\"
     ((\"tn\" \"+news\"))))"
  (declare (indent defun))
  (cl-labels ((escape-spaces (string)
                             ;; Return STRING with spaces escaped with "\s-".  Necessary
                             ;; because Elfeed treats all literal spaces as separating tokens.
                             (replace-regexp-in-string (rx space) "\\s-" string t t)))
    (let* ((completion-fns
            (list (cons :complete-age
                        (lambda ()
                          (interactive)
                          (save-match-data
                            (let* ((date-regexp (rx (group (or bos blank) "@" (1+ digit) (1+ (not blank)))))
                                   (date-tag (when (string-match date-regexp elfeed-search-filter)
                                               (match-string 1 elfeed-search-filter))))
                              (elfeed-search-set-filter
                               (replace-regexp-in-string date-regexp (read-string "Date: " date-tag)
                                                         elfeed-search-filter t t))))))
                  (cons :complete-feed
                        '(concat "=" (replace-regexp-in-string
                                      (rx space) "\\s-"
                                      (->> (hash-table-values elfeed-db-feeds)
                                           (--map (elfeed-meta it :title))
                                           (completing-read "Feed: ")
                                           regexp-quote) t t)))
                  (cons :complete-tag
                        '(concat "+" (completing-read "Tag: " (elfeed-db-get-all-tags))))))
           (body (append '(:title elfeed-search-filter :color pink :hint t :quit-key "q")
                         body))
           (heads (cl-loop for (heading views) on views by #'cddr
                           collect heading
                           collect (cl-loop for (key component label) in views
                                            collect
                                            `(,key
                                              ,(cl-typecase component
                                                 ((and function (not null))
                                                  ;; I don't understand why nil matches
                                                  ;; (or lambda function), but it does,
                                                  ;; so we have to account for it.  See
                                                  ;; (info-lookup-symbol 'cl-typep).
                                                  `(funcall ,component))
                                                 (string
                                                  `(elfeed-search-set-filter
                                                    (unpackaged/elfeed-search-filter-toggle-component
                                                     elfeed-search-filter ,(escape-spaces component))))
                                                 (otherwise
                                                  `(elfeed-search-set-filter
                                                    ,(when component
                                                       `(unpackaged/elfeed-search-filter-toggle-component
                                                         elfeed-search-filter ,component)))))
                                              ,(or label component "Default"))))))
      ;; I am so glad I discovered `cl-sublis'.  I tried several variations of `cl-labels' and
      ;; `cl-macrolet' and `cl-symbol-macrolet', but this is the only way that has worked.
      (setf heads (cl-sublis completion-fns heads))
      `(pretty-hydra-define ,name ,body
                            ,heads))))

(cl-defun unpackaged/elfeed-search-filter-toggle-component (string component)
  "Return STRING (which should be `elfeed-search-filter') having toggled COMPONENT.
Tries to intelligently handle components based on their prefix:
+tag, =feed, regexp."
  (save-match-data
    (cl-labels ((toggle (component +prefix -prefix string)
                        (let ((+pat (rx-to-string `(seq (or bos blank)
                                                        (group ,+prefix ,component)
                                                        (or eos blank))))
                              (-pat (rx-to-string `(seq (group (or bos (1+ blank)) ,-prefix ,component)
                                                        (or eos blank)))))
                          ;; TODO: In newer Emacs versions, the `rx' pattern `literal'
                          ;; evaluates at runtime in `pcase' expressions.
                          (pcase string
                            ((pred (string-match +pat)) (rm (concat -prefix component) string))
                            ((pred (string-match -pat)) (rm "" string))
                            (_ (concat string " " +prefix component)))))
                (rm (new string) (replace-match new t t string 1)))
      (pcase component
        ((rx bos "+" (group (1+ anything)))
         (toggle (match-string 1 component) "+" "-" string))
        ((rx bos "=" (group (1+ anything)))
         (toggle (match-string 1 component) "=" "~" string))
        (_ (toggle component "" "!" string))))))
#+END_SRC
**** hydra
#+BEGIN_SRC emacs-lisp
(unpackaged/elfeed-search-view-hydra-define my/elfeed-search-view-hydra
  (:foreign-keys warn)
  ("Views"
   (("@" :complete-age "Date")
    ("d" nil))
   "Status"
   (("su" "+unread"))
   "Feed"
   (("f TAB" :complete-feed "Choose")
    ("fE" "=Planet Emacslife" "Planet Emacslife"))
   "Tags"
   (("t TAB" :complete-tag "Choose")
    ("te" "+Emacs"))
   ""
   (("tn" "+news"))))
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
(setq rustic-lsp-server 'rust-analyzer)
#+END_SRC
** snippet
#+BEGIN_SRC emacs-lisp
(after! yasnippet
  (push (expand-file-name "snippets/" doom-private-dir) yas-snippet-dirs))
#+END_SRC
** solidity
#+BEGIN_SRC emacs-lisp
;; (setq solidity-solc-path "/usr/bin/solc")
(setq flycheck-solidity-solium-soliumrcfile "/home/emiller/sync/.soliumrc.json")
(setq solidity-flycheck-solc-checker-active t)
#+END_SRC
** speed-type

#+BEGIN_SRC emacs-lisp
(use-package! speed-type)
#+END_SRC
** vue
#+BEGIN_SRC emacs-lisp
(add-hook 'web-mode-local-vars-hook #'lsp!)
#+END_SRC
