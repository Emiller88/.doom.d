#+TITLE: DOOM Emacs Configuration
#+AUTHOR: Edmund Miller
* Basics
Who are you?
Who, who, who, who?
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "Edmund.A.Miller@gmail.com"
      user-full-name "Edmund Miller")
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defvar xdg-data (getenv "XDG_DATA_HOME"))
(defvar xdg-config (getenv "XDG_CONFIG_HOME"))
#+END_SRC
Change font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 17)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 17)
      doom-unicode-font (font-spec :family "Iosevka" :size 17)
      doom-big-font (font-spec :family "Iosevka" :size 31))
#+END_SRC
Change Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC
Change the banner
#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "banner.png" doom-private-dir))
#+END_SRC
Cleanup Whitespace
#+BEGIN_SRC emacs-lisp
;; (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
(map!
 (:leader
   (:prefix "f"
     :desc "Find file in dotfiles" :n "o" #'+emiller/find-in-dotfiles
     :desc "Browse dotfiles" :n "O" #'+emiller/browse-dotfiles)
   (:prefix "i"
     :desc "Insert date" :n "d" #'insert-todays-date)
   (:prefix "n"
     :desc "Browse mode notes"     :n  "m" #'+emiller/find-notes-for-major-mode
     :desc "Browse project notes" :n "p" #'+emiller/find-notes-for-project)
   (:prefix "o"
     :desc "Calc" :n "c" #'calc
     :desc "easy-hugo" :n "g" #'easy-hugo
     :desc "APP: IRC" :n "i" #'=irc
     :desc "i.org" :n "o" #'emiller/visit-i-org
     :desc "APP: notmuch" :n "m" #'=notmuch
     :desc "dired-sidebar" :n "n" #'dired-sidebar-toggle-sidebar
     :desc "emms" :n "s" #'emms
     :desc "proced" :n "p" #'proced
     :desc "APP: rss" :n "," #'=rss)
   (:prefix "p"
     :desc "Counsel-ag" :n "f" #'counsel-ag)
   (:prefix "g"
     :desc "Git Status" :n "g" #'magit-status
     :desc "List gists" :n "l" #'+gist:list)
   (:prefix "n"
     :desc "Org-noter" :n "o" #'org-noter)
   :desc "New workspace" :n "N" (lambda! () (+workspace/new (read-string "Enter workspace name: "))))
 (:when (featurep! :feature workspaces)
   :nmvi "M-t" #'+workspace/new
   :nmvi "M-1" (λ! (+workspace/switch-to 0))
   :nmvi "M-2" (λ! (+workspace/switch-to 1))
   :nmvi "M-3" (λ! (+workspace/switch-to 2))
   :nmvi "M-4" (λ! (+workspace/switch-to 3))
   :nmvi "M-5" (λ! (+workspace/switch-to 4))
   :nmvi "M-6" (λ! (+workspace/switch-to 5))
   :nmvi "M-7" (λ! (+workspace/switch-to 6))
   :nmvi "M-8" (λ! (+workspace/switch-to 7))
   :nmvi "M-9" (λ! (+workspace/switch-to 8)))
 (:map vterm-mode-map
   ;; Easier window movement
   :i "C-h" #'evil-window-left
   :i "C-j" #'evil-window-down
   :i "C-k" #'evil-window-up
   :i "C-l" #'evil-window-right))
#+END_SRC
* Functions
Edit i.org
#+BEGIN_SRC emacs-lisp
(defun emiller/visit-i-org ()
  (interactive)
  (find-file "~/Dropbox/orgfiles/gtd/i.org"))
#+END_SRC
Ediff the ~init.example.el~ and my ~init.el~
#+BEGIN_SRC emacs-lisp
(defun ediff-init-files ()
  (interactive)
  (ediff-files (expand-file-name "init.el" doom-private-dir)
               (expand-file-name "init.example.el" user-emacs-directory)))
#+END_SRC
** Insert Date
Helpful for ~Snakemake~
#+BEGIN_SRC emacs-lisp
(defun insert-todays-date (arg)
  (interactive "P")
  (insert (if arg
              (format-time-string "%d-%m-%Y")
            (format-time-string "%Y-%m-%d"))))
(global-set-key (kbd "C-c d") 'insert-todays-date)
#+END_SRC
* Modules
** Clojure
#+BEGIN_SRC emacs-lisp
(after! cider
  (set-popup-rules!
    '(("^\\*cider-error*" :ignore t)
      ("^\\*cider-repl" :quit nil)
      ("^\\*cider-repl-history" :vslot 2 :ttl nil))))
#+END_SRC
** deft
#+BEGIN_SRC emacs-lisp
(after! deft
  (setq deft-directory "~/Dropbox/orgfiles/notes"))
#+end_src
** Dired
Get rid of dired message when using a
#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
** dired-sidebar
#+BEGIN_SRC emacs-lisp
(after! dired
    (use-package! dired-sidebar))
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
(after! elfeed-search
  ;; face for starred articles
  ;; (defface elfeed-search-starred-title-face
  ;;   '((t :foreground "#f77"))
  ;;   "Marks a starred Elfeed entry.")

  ;; (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
  ;;shortcut to jump to starred bookmark
  ;; (defun emiller/elfeed-show-starred ()
  ;;   (interactive)
  ;;   (bookmark-jump "elfeed-starred"))

  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'star)))
#+END_SRC
Keybindings
#+BEGIN_SRC emacs-lisp
(after! elfeed-search
  (map! :map elfeed-search-mode-map
        :localleader
        :n "s" #'elfeed-toggle-star))
#+END_SRC
Set max width
#+BEGIN_SRC emacs-lisp
(after! elfeed
  (setq elfeed-search-title-max-width 120))
#+END_SRC
** emms
#+BEGIN_SRC emacs-lisp
(use-package! emms
  :config
  (require 'emms-setup)
  (require 'emms-player-mpd)
  (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
  (setq emms-seek-seconds 5)
  (setq emms-player-list '(emms-player-mpd))
  (setq emms-info-functions '(emms-info-mpd))
  (setq emms-player-mpd-server-name "localhost")
  (setq emms-player-mpd-server-port "6600")
  (setq emms-source-file-default-directory "~/Music/"))
#+END_SRC
** eShell
Get rid of modeline in eshell buffers
#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook #'hide-mode-line-mode)
#+END_SRC
** irc
#+BEGIN_SRC emacs-lisp
(after! circe
  (set-irc-server! "chat.freenode.net"
                   `(:tls t
                          :port 6697
                          :nick "emiller88"
                          :sasl-username ,(+pass-get-user "irc/freenode.net")
                          :sasl-password (lambda (&rest _) (+pass-get-secret "irc/freenode.net"))
                          :channels ("#bioinformatics" "#clojure" "#emacs" "#emacs-circe" "#home-manager" "#nixos" "#nixos-emacs" "##rust" "#python"))))
#+end_src
Other Channels
- #haskell
** JavaScript
#+BEGIN_SRC emacs-lisp
(defun i-will-have-what-js-is-having ()
  (let ((buffer-file-name (concat (file-name-sans-extension buffer-file-name) ".js")))
    (set-auto-mode)))
(add-to-list 'auto-mode-alist '("\\.vmjs\\'" . i-will-have-what-js-is-having))
#+end_src
** lsp
#+BEGIN_SRC emacs-lisp
(after! lsp
  (setq lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-show-diagnostics nil
        lsp-signature-render-all nil))
#+END_SRC
** Magit
*** Git-gutter-fringe
#+BEGIN_SRC emacs-lisp
(defun +version-control|git-gutter-maybe ()
  (when buffer-file-name
    (require 'git-gutter-fringe)
    (git-gutter-mode +1)))
#+END_SRC
*** GPG signing
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq magit-repository-directories '(("~/src" . 3))
        magit-save-repository-buffers nil
        magit-commit-arguments '("--gpg-sign=BD387FF7BC10AA9D")
        magit-rebase-arguments '("--autostash" "--gpg-sign=BD387FF7BC10AA9D")
        magit-pull-arguments '("--rebase" "--autostash" "--gpg-sign=BD387FF7BC10AA9D")))
#+END_SRC
*** Set editor
#+BEGIN_SRC emacs-lisp
(setenv "EDITOR" "emacsclient")
#+end_SRC
*** GitHub Reviews
#+BEGIN_SRC emacs-lisp
(after! magit
    (use-package! github-review))
#+END_SRC
** Notmuch
Add delete, which adds the ~trash~ tag
Counsel notmuch
Fix quitting notmuch to remove the workspace
#+BEGIN_SRC emacs-lisp
(map! :after notmuch
      :map notmuch-tree-mode-map
      :n "d" #'+notmuch/tree-delete
      :n "q" #'+notmuch/quit
      :map notmuch-search-mode-map
      :n "d" #'+notmuch/search-delete
      :n "q" #'+notmuch/quit
      (:leader
        (:prefix "/"
          :desc "Browse mode notes" :n "m" #'counsel-notmuch)))

(after! notmuch
  (setq +notmuch-sync-backend 'mbsync
        notmuch-always-prompt-for-sender t
        send-mail-function 'sendmail-send-it))
#+END_SRC
** Org-mode
*** Misc
Start in insert mode in =org-capture=
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
Set ~+org-vars~
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-directory "/home/emiller/Dropbox/orgfiles/")
  (setq +org-capture-todo-file "i.org"))
#+END_SRC
Function to return the absolute address of an org file, given its relative name.
#+BEGIN_SRC emacs-lisp
(after! org
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename)))
#+END_SRC
Set one archive file to rule them all
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s")))
#+END_SRC
Set Files that are pulled into ~org-agenda~
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-files (list "~/Dropbox/orgfiles/i.org"
                               "~/Dropbox/orgfiles/o.org"
                               "~/Dropbox/orgfiles/schedule.org"
                               "~/Dropbox/orgfiles/gtd/gtd.org"
                               "~/Dropbox/orgfiles/gtd/tickler.org"
                               "~/src/olypsis/daily-journals/Edmund_Miller.org")))
#+END_SRC
Set Custom Icons
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-bullets-bullet-list '("#"))
  (setq org-ellipsis " ▼ "))
#+END_SRC
Org export settings
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-export-with-toc nil))
#+END_SRC
Log time when things get marked as done
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-log-done 'time))
#+END_SRC
Org Capture Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/schedule.org" )
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("n" "Personal notes" entry
           (file+headline "~/Dropbox/orgfiles/notes.org" "Inbox")
           "* %u %?\n%i\n%a" :prepend t :kill-buffer t)

          ("l" "Link" entry
           (file+headline "~/Dropbox/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)

          ("t" "Todo [Inbox]" entry
           (file+headline "~/Dropbox/orgfiles/gtd/i.org" "Unsorted")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t)

          ("T" "Tickler" entry
           (file+headline "~/Dropbox/orgfiles/gtd/tickler.org" "Tickler")
           "* %i%? \n %U")

          ("j" "Lab Entry" entry
           (file+olp+datetree "~/Dropbox/orgfiles/notes/Lab_Notebook.org" "Lab Journal")
           "* %? %^g \n ")

          ("o" "Work To Do" entry
           (file+headline "~/Dropbox/orgfiles/o.org" "Unsorted")
           "** TODO %?\n%T" :prepend t)

          ("w" "Work Journal" entry
           (file+olp+datetree "~/src/olypsis/daily-journals/Edmund_Miller.org" )
           "* Tasks \n** [ ] %? \n* Journal %^g \n ")

          ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
          ;; {todo,notes,changelog}.org file is found in a parent directory.
          ("p" "Templates for projects")
          ("pt" "Project todo" entry  ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t)
          ("pn" "Project notes" entry  ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t)
          ("pc" "Project changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-notes-file "Unreleased")
           "* TODO %?\n%i\n%a" :prepend t :kill-buffer t))))
#+END_SRC
Set org-refile to utilize helm or ivy
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)

  (setq org-refile-targets
        '((nil :maxlevel . 3)
          ("~/Dropbox/orgfiles/i.org" :maxlevel . 4)
          ("~/Dropbox/orgfiles/gtd/gtd.org" :maxlevel . 4)
          ("~/Dropbox/orgfiles/gtd/someday.org" :maxlevel . 3)
          ("~/Dropbox/orgfiles/gtd/tickler.org" :maxlevel . 4))))
#+END_SRC
*** org-agenda-custom
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" nil)
            (alltodo "")))
          ("g" . "GTD contexts")
          ("ga" "All TODO" alltodo nil
           ((org-agenda-sorting-strategy '(tag-up priority-up))))

          ("gl" "Lab" tags-todo "lab"
           ((org-agenda-sorting-strategy '(priority-up))
            ;; (org-agenda-prefix-format "[ ] %T: ")
            (org-agenda-compact-blocks t)))

          ("gw" "Work" tags-todo "@work"
           ((org-agenda-sorting-strategy '(priority-up))))
          ;; (org-agenda-compact-blocks t)))

          ("gs" "Study Time" tags-todo "@study"
           ((org-agenda-sorting-strategy '(priority-up))))

          ("ge" "Emacs Time" tags-todo "@emacs"))))
#+END_SRC
*** org-gcal
#+BEGIN_SRC emacs-lisp
(use-package! org-gcal
  :config
  (setq org-gcal-client-id "119671856150-j6j4b8hjm1k8d1v2ar39c2g1ifdv8iq9.apps.googleusercontent.com"
        org-gcal-client-secret "KOa_aQ-SsyNkK_K4Y5ePk-k1"
        org-gcal-file-alist '(("Edmund.a.miller@gmail.com" .  "~/Dropbox/orgfiles/schedule.org"))))
#+end_src
** pretty-code
#+BEGIN_SRC emacs-lisp
(setq +pretty-code-enabled-modes '(emacs-lisp-mode))
#+END_SRC
** Python
*** Tox
#+BEGIN_SRC emacs-lisp
(use-package! tox)
#+END_SRC
** Reference
#+BEGIN_SRC emacs-lisp
(setq reftex-default-bibliography '("~/Dropbox/orgfiles/reference/Bibliography.bib"))
(setq bibtex-completion-bibliography "~/Dropbox/orgfiles/reference/Bibliography.bib" ;the major bibtex file
      bibtex-completion-library-path "~/Dropbox/orgfiles/reference/pdf/" ;the directory to store pdfs
      bibtex-completion-notes-path "~/Dropbox/orgfiles/ref-notes.org" ;the note file for reference notes
      )
#+end_src
** Rust
#+BEGIN_SRC emacs-lisp
(setq +rust-src-dir "~/src/rust/src/")
#+END_SRC
** Solidity
#+BEGIN_SRC emacs-lisp
(setq solidity-solc-path "/usr/bin/solc")
(setq flycheck-solidity-solium-soliumrcfile "/home/emiller/Dropbox/.soliumrc.json")
(setq solidity-flycheck-solc-checker-active t)
#+END_SRC
* Packages
** Easy Hugo
#+BEGIN_SRC emacs-lisp
(use-package! easy-hugo
  :init
  (setq easy-hugo-basedir "~/src/personalProjects/emillerSite/")
  (setq easy-hugo-url "https:/emiller88.github.io/")
  (setq easy-hugo-previewtime "300")
  (setq easy-hugo-default-ext ".org")
  (setq easy-hugo-org-header t)
  (setq easy-hugo-postdir "content/posts")
  (set-evil-initial-state! 'easy-hugo-mode 'emacs))
#+END_SRC
** Ivy-yasnippet
#+BEGIN_SRC emacs-lisp
(after! ivy
(use-package! ivy-yasnippet
  :commands (ivy-yasnippet)
  :config
  (map!
   (:leader
     (:prefix "s"
       :desc "Ivy-yasnippet" :n "y" #'ivy-yasnippet)))))
#+END_SRC
** Ivy Icons
#+BEGIN_SRC emacs-lisp
(setq +ivy-buffer-icons t)
#+end_src
** Graphviz-dot-mode
#+BEGIN_SRC emacs-lisp
(use-package! graphviz-dot-mode)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(after! helm
 (setq +helm-posframe-text-scale 1)
  (setq +helm-posframe-parameters
        '((internal-border-width . 6)
          (width . 0.3)
          (height . 0.15)
          (min-width . 60)
          (min-height . 8))))
#+END_SRC
** Org
*** Auto-org-md
#+BEGIN_SRC emacs-lisp
(after! org
  (use-package! auto-org-md))
#+END_SRC
*** Org-clock-csv
#+BEGIN_SRC emacs-lisp
(after! org
(use-package! org-clock-csv))
#+END_SRC
*** Org-noter
#+BEGIN_SRC emacs-lisp
(after! org
(use-package! org-noter
  :config
  (map!
   (:leader
     (:prefix "n"
       :desc "Org-noter-insert" :n "i" #'org-noter-insert-note)))))
#+END_SRC
** Reformatter
#+BEGIN_SRC emacs-lisp
(use-package! reformatter
  :config
  (defconst Rscript-command "Rscript")
  (reformatter-define styler
    :program Rscript-command
    :args (list "--vanilla" "-e" "con <- file(\"stdin\")
out <- styler::style_text(readLines(con))
close(con)
out")
    :lighter " styler"))
#+end_src
** package-lint
#+BEGIN_SRC emacs-lisp
;; (use-package! package-lint)
#+END_SRC
** Write
*** Languagetool
#+BEGIN_SRC emacs-lisp
;; (setq langtool-language-tool-jar "~/src/emacsExtras/languagetool-commandline.jar")
(setq +write-text-scale +2)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
(after! yasnippet
  (push (expand-file-name "snippets/" doom-private-dir) yas-snippet-dirs))
#+END_SRC
